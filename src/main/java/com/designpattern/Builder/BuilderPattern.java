package com.designpattern.Builder;

/**
 *
 * 构建者模式．
 *
 * 在工厂模式中，我们生产出来的对象都是一样的．那如果我们想生产出来不一样的对象怎么办？
 *
 * 如果对象的改动不大，我们可以首先创建出来一个对象，然后通过原型模式来修改．
 * 那如果对象的改动大呢？而且我们怎样首先创建出来一个对象呢？
 *
 * 这就要使用构建者模式了．
 *
 * 在该模式中，我们会定义一个抽象类，指示一个对象应该由哪些部分组成，并定义一些方法来构造对象．
 * 然后会定义若干个具体的实现类，来构造一个对象．
 *
 * 举例来说，我们是一家装修公司，推出了不同的装修套餐．
 * 这些套餐的每个小组件都是相同的，比如设计图纸，采购，装修等．
 * 我们的套餐有两种：
 *  　１.　10w．从设计图纸，采购，装修等全包
 *    ２. 6w．但是只设计图纸，装修．不包含采购
 *
 * 对于有一部分用户，不相信我们采购的质量，想自己采购，就会选择第二种套餐．
 *
 * 在这个例子中，套餐就是抽象类，两种不同的套餐就是具体的实现类．设计图纸，采购，装修就是房屋装修这个对象的组件．
 *
 * 相信经历过一个对象十几个参数，而大多数参数其实我们用不到的场景的朋友，都非常熟悉构建者模式．
 *
 * */
public class BuilderPattern {

    public static void main(String[] args) {
        Parlour parlour = new DecoratorA().buildWall().buildTv().buildSofa().build();
        System.out.println(parlour);
    }

}
